# -*- coding: utf-8 -*-
"""machine learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JOH15wKqeAld4f91uzlPNaTxbpo96EMX
"""

pip install u8darts

pip install 'u8darts[torch]'

from google.colab import files


uploaded = files.upload()

import pandas as pd
import io

jakarta_neighborhood_data = pd.read_csv(io.BytesIO(uploaded['jakarta neighborhood data.csv']))
jakarta_neighborhood_data.head(10)
print(
jakarta_neighborhood_data)

jakarta_neighborhood_data.info()

jakarta_neighborhood_data.head()

latitude = -6.140113349
longitude = 105.8031625

"""Visualizing the obtained data set"""

import folium

map_jakarta = folium.Map(location=[latitude, longitude], zoom_start=11)

# add markers to map
for lat, lng, label in zip(jakarta_neighborhood_data['latitude'], jakarta_neighborhood_data['longitude'], jakarta_neighborhood_data['Neighborhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='black',
        fill=True,
        fill_color='#e83131',
        fill_opacity=0.7,
        parse_html=False).add_to(map_jakarta)

map_jakarta

from google.colab import files


uploaded = files.upload()

import pandas as pd
import io

danger_zone = pd.read_csv(io.BytesIO(uploaded['safer roads recommendation.csv']))
danger_zone.head(10)
print(
danger_zone)

danger_zone.head()

import folium

map_res = folium.Map(location=[latitude, longitude], zoom_start=11)

# add markers to map
for lat, lng, label in zip(danger_zone['latitude'], danger_zone['longitude'], danger_zone['Road recommendation ']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='black',
        fill=True,
        fill_color='#77cc31',
        fill_opacity=0.7,
        parse_html=False).add_to(map_res)

map_res

"""Normalization of the data for clustering"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
# Matplotlib and associated plotting modules
import matplotlib.cm as cm

import matplotlib.colors as colors

#one hot encoding
danger_zone_onehot = pd.get_dummies(danger_zone[['Type of danger']], prefix = "", prefix_sep ="" )

#add neighborhood column back to dataframe
danger_zone_onehot ['Neighborhood'] = danger_zone ['Neighborhood']

#move neighborhood column to the first column
fixed_columns = [danger_zone_onehot.columns[-1]] + list(danger_zone_onehot.columns[:-1])
danger_zone_onehot = danger_zone_onehot[fixed_columns]

danger_zone_onehot.tail()

danger_zone_onehot.shape

#to be used while generating graphs
danger_zone_grouped = danger_zone_onehot.groupby('Neighborhood').mean().reset_index()
danger_zone_grouped.tail()

for i in danger_zone_grouped.columns:
  print (i, end=", ")

danger_zone_grouped.shape

def return_most_common_dangers(row, num_top_dangers):
  row_categories = row.iloc[1:]
  row_categories_sorted = row_categories.sort_values(ascending=False)

  return row_categories_sorted.index.values[0:num_top_dangers]

num_top_dangers = 7
indicators = ['st', 'nd', 'rd']

#create columns according to number of top dangers
columns = ['Neighborhood']
for ind in np.arange(num_top_dangers):
  try:
    columns.append('{}{} Most Common Danger'.format(ind+1, indicators[ind]))
  except:
    columns.append('{} th Most Common Danger'.format(ind+1))

#create a new dataframe
neighborhoods_dangers_sorted = pd.DataFrame(columns=columns)
neighborhoods_dangers_sorted['Neighborhood'] = danger_zone_grouped['Neighborhood']

for ind in np.arange(danger_zone_grouped.shape[0]):
    neighborhoods_dangers_sorted.iloc[ind, 1:] = return_most_common_dangers(danger_zone_grouped.iloc[ind, :], num_top_dangers)

neighborhoods_dangers_sorted.tail()

"""Applying the clustering algorithm"""

# set number of clusters
kclusters = 5

danger_zone_clustering = danger_zone_grouped.drop ('Neighborhood', 1)

#run K-means clustering
kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(danger_zone_clustering)

#check cluster labels generated for each row in the dataframe
kmeans.labels_[0:10]

# add clustering labels
neighborhoods_dangers_sorted.insert(0, 'Cluster Labels', kmeans.labels_)

danger_zone_merged = jakarta_neighborhood_data

# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood
danger_zone_merged = danger_zone_merged.join(neighborhoods_dangers_sorted.set_index('Neighborhood'), on='Neighborhood')

danger_zone_merged.dropna(inplace=True)
danger_zone_merged.tail() # check the last columns!

"""Cluster Visualization"""

# create map
map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)

# set color scheme for the clusters
x = np.arange(kclusters)
ys = [i + x + (i*x)**2 for i in range(kclusters)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, poi, cluster in zip(danger_zone_merged['latitude'], danger_zone_merged['longitude'], danger_zone_merged['Neighborhood'], danger_zone_merged['Cluster Labels']):
    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color=rainbow[int(cluster)-1],
        fill=True,
        fill_color=rainbow[int(cluster)-1],
        fill_opacity=0.7).add_to(map_clusters)

map_clusters

clusterdata = pd.merge(danger_zone_onehot.groupby('Neighborhood').sum(),danger_zone_merged[['Neighborhood','Cluster Labels']],left_on='Neighborhood', right_on='Neighborhood',how='inner')
clusterdata = clusterdata.iloc[:,1:].groupby('Cluster Labels').sum().transpose()
clusterdata.head()

"""####Analyzing the Clusters####



"""

import seaborn as sns

def plot_bar(clusternumber):
    sns.set(style="whitegrid",rc={'figure.figsize':(20,10)})
    df = clusterdata[[clusternumber]].drop(clusterdata[[clusternumber]][clusterdata[clusternumber]==0].index)
    chart = sns.barplot(x=df.index, y=clusternumber, data=df)
    chart.set_xticklabels(chart.get_xticklabels(),rotation=90)

plot_bar(0)

plot_bar(1)

plot_bar(2)

plot_bar(3)

plot_bar(4)

"""####Recommendation####"""

danger_zone.drop(danger_zone.filter(regex="Unname"),axis=1, inplace=True)

del danger_zone['No']

jakarta_neighborhood_data.drop(jakarta_neighborhood_data.filter(regex="Unname"),axis=1, inplace=True)

del jakarta_neighborhood_data['No']

forheatmap=danger_zone.copy()
forheatmap=pd.merge(forheatmap,danger_zone_merged[['Neighborhood','Cluster Labels']],left_on='Neighborhood', right_on='Neighborhood',how='inner')
forheatmap.drop(forheatmap[~forheatmap['Cluster Labels'].isin([1,2])].index, inplace=True)

forheatmap.head()

from folium.plugins import HeatMap

#heat map of all dangers in selected Neighborhoods
rec_heat = folium.Map(location=[latitude, longitude], zoom_start=11)
HeatMap(list(zip(forheatmap['latitude'],forheatmap['longitude'])),
        min_opacity=0.7,
        radius=10, blur=15,
        max_zoom=1
       ).add_to(rec_heat)
for lat, lng, label in zip(forheatmap['Neighborhood latitude'], forheatmap['Neighborhood longitude'], forheatmap['Neighborhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='red',
        fill=True,
        fill_color='#3186cc',
        fill_opacity=0.7,
        parse_html=False).add_to(rec_heat)
rec_heat

fortaw = forheatmap[forheatmap['Type of danger']=='Tawuran']

# heat map for Begal in the selected Neighborhoods
rec_heat_taw = folium.Map(location=[latitude, longitude], zoom_start=11)
HeatMap(list(zip(fortaw['latitude'],fortaw['longitude'])),
        min_opacity=0.7,
        radius=10, blur=15,
        max_zoom=1
       ).add_to(rec_heat_taw)
for lat, lng, label in zip(fortaw['Neighborhood latitude'], fortaw['Neighborhood longitude'], fortaw['Neighborhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='yellow',
        fill=True,
        fill_color='#cc4831',
        fill_opacity=0.7,
        parse_html=False).add_to(rec_heat_taw)
rec_heat_taw

count_all = forheatmap[['Neighborhood','Road recommendation ']].groupby('Neighborhood').count().sort_values(by='Road recommendation ')
target_count = int(0.6*len(count_all))
print(count_all.iloc[target_count])
count_all.drop
count_all.columns=['all count']
count_all.head()

count_taw = forheatmap[forheatmap['Type of danger']=="Tawuran"][['Neighborhood','Road recommendation ']].groupby('Neighborhood').count().sort_values(by='Road recommendation ')
target_count = int(0.3*len(count_taw))
print(count_taw.iloc[target_count])
count_taw.drop
count_taw.columns = ['taw count']
count_taw.head()

lowdensity = count_all.join(count_taw)
lowdensity.index.values

count_all = forheatmap[['Neighborhood','Road recommendation ']].groupby('Neighborhood').count().sort_values(by='Road recommendation ')
target_count = int(0.3*len(count_all))
print(count_all.iloc[target_count])
count_all.drop
count_all.columns=['all count']
count_all.head()

lowdensity = count_all.join(count_rsk)
lowdensity.index.values

"""Jalan Licin"""

forlic = forheatmap[forheatmap['Type of danger']=='Jalan Licin']

# heat map for Begal in the selected Neighborhoods
rec_heat_lic = folium.Map(location=[latitude, longitude], zoom_start=11)
HeatMap(list(zip(forlic['latitude'],forlic['longitude'])),
        min_opacity=0.7,
        radius=10, blur=15,
        max_zoom=1
       ).add_to(rec_heat_lic)
for lat, lng, label in zip(forlic['Neighborhood latitude'], forlic['Neighborhood longitude'], forlic['Neighborhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='green',
        fill=True,
        fill_color='#cc4831',
        fill_opacity=0.7,
        parse_html=False).add_to(rec_heat_lic)
rec_heat_lic

temp_recommend = jakarta_neighborhood_data.copy()
temp_recommend.drop(temp_recommend[~temp_recommend['Neighborhood'].isin(lowdensity.index.values)].index, inplace=True)
temp_recommend.head()

#most popular neighborhoods
top_road = safer_roads_recommendation[['Neighborhood','Road recommendation ']].groupby('Neighborhood').count().sort_values(by='Road recommendation ', ascending=False).head(5).index.values
top_road

toplatlng = jakarta_neighborhood_data[['Neighborhood','latitude','longitude']][jakarta_neighborhood_data['Neighborhood'].isin(top_road)].reset_index()
toplatlng

from math import sin, cos, sqrt, atan2, radians

def distanceInKM(la1,lo1,la2,lo2):
    # approximate radius of earth in km
    R = 6373.0

    lat1 = radians(la1)
    lon1 = radians(lo1)
    lat2 = radians(la2)
    lon2 = radians(lo2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    dis = R * c
    return round(dis,4)

print("Result:", distanceInKM(toplatlng.iloc[2]['latitude'],toplatlng.iloc[2]['longitude'],toplatlng.iloc[0]['latitude'],toplatlng.iloc[0]['longitude']))

temp_recommend.reset_index(inplace=True)

temp_recommend

temp_recommend.head()

for i in toplatlng.index:
    temp_recommend[toplatlng.iloc[i]['Neighborhood']] = temp_recommend.apply(lambda x : distanceInKM(toplatlng.iloc[i]['latitude'],toplatlng.iloc[i]['longitude'],x['latitude'],x['longitude']),axis=1)

temp_recommend.head()

# Borough near Menteng
roadNearMenteng = temp_recommend.sort_values(by=['Menteng']).set_index('Borough')
roadNearMenteng

# Borough near Palmerah
roadNearPalmerah = temp_recommend.sort_values(by=['Palmerah']).set_index('Borough')
roadNearPalmerah

# Borough near Duren Sawit
roadNearDurenSawit = temp_recommend.sort_values(by=['Duren Sawit']).set_index('Borough')
roadNearDurenSawit

# Borough near Tambora
roadNearTambora = temp_recommend.sort_values(by=['Tambora']).set_index('Borough')
roadNearTambora

# Borough near Tanjung Priok
roadNearTanjungPriok = temp_recommend.sort_values(by=['Tanjung Priok']).set_index('Borough')
roadNearTanjungPriok

final_recommend=roadNearMenteng.append(roadNearPalmerah).append(roadNearDurenSawit).append(roadNearTambora).append(roadNearTanjungPriok).reset_index()
final_recommend.drop_duplicates(inplace=True)
final_recommend.reset_index(inplace=True)
final_recommend.drop(columns=['index'],inplace=True)
final_recommend

import json

r = final_recommend["latitude"]

y = final_recommend["longitude"]

res = []
for i in range (len(r)):
	res.append({"lat": r[i], "lng": y[i]})

res

with open("myfile.json", "w") as f:
	json.dump(res, f)

"""####Final Recomendation####"""

final = folium.Map(location=[latitude, longitude], zoom_start=11)

# add markers to map
for lat, lng, label in zip(final_recommend['latitude'], final_recommend['longitude'], final_recommend['Borough']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='red',
        fill=True,
        fill_color='#ff0505',
        fill_opacity=0.7,
        parse_html=False).add_to(final)

final

len(final_recommend)

from google.colab import files
files.download('myfile.json')